{"version":3,"sources":["data/rates.js","App.js","reportWebVitals.js","index.js"],"names":["Promise","resolve","Dinero","globalExchangeRatesApi","currency","endpoint","RatesPromise","CurrencySelector","rates","onChange","map","rate","index","App","useState","setRates","originCurrency","setOriginCurrency","targetCurrency","setTargetCurrency","originalAmount","setOriginalAmount","finalAmount","setFinalAmount","useEffect","ratesData","then","value","ratesArray","Object","keys","convert","a","amount","parseInt","result","toFormat","className","ev","target","type","placeholder","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uQAAeA,UAAQC,QAClB,CACG,OAAU,EACV,KAAQ,MACR,KAAQ,aACR,MAAS,CACL,IAAO,OACP,IAAO,OACP,IAAO,OACP,IAAO,OACP,IAAO,OACP,IAAO,OACP,IAAO,OACP,IAAO,OACP,IAAO,OACP,IAAO,OACP,IAAO,MACP,IAAO,MACP,IAAO,MACP,IAAO,KACP,IAAO,MACP,IAAO,MACP,IAAO,OACP,IAAO,QACP,IAAO,OACP,IAAO,OACP,IAAO,QACP,IAAO,OACP,IAAO,OACP,IAAO,MACP,IAAO,OACP,IAAO,MACP,IAAO,OACP,IAAO,OACP,IAAO,OACP,IAAO,MACP,IAAO,OACP,IAAO,W,OC/BnBC,IAAOC,uBAAyB,CAC9BC,SAAS,MACTC,SAAUC,GAGZ,IAAIC,EAAmB,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAOC,EAAT,EAASA,SAAT,OACrB,wBAAQA,SAAUA,EAAlB,SACGD,EAAME,KAAI,SAACC,EAAMC,GAAP,OAAe,iCAAqBD,GAARC,SAgE5BC,MA5Df,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACRN,EADQ,KACDO,EADC,OAE6BD,mBAAS,IAFtC,mBAERE,EAFQ,KAEQC,EAFR,OAG6BH,mBAAS,IAHtC,mBAGRI,EAHQ,KAGQC,EAHR,OAI6BL,mBAAS,IAJtC,mBAIRM,EAJQ,KAIQC,EAJR,OAKuBP,mBAAS,IALhC,mBAKRQ,EALQ,KAKKC,EALL,KAObC,qBAAU,WACR,IAAIC,EACJnB,EAAaoB,MAAK,SAACC,GACjBF,EAAYE,EACZ,IAAIC,EAAaC,OAAOC,KAAKL,EAAUjB,OACvCO,EAASa,QAEX,IAEF,IAAIG,EAAO,uCAAG,8BAAAC,EAAA,6DACRC,EAAS/B,YAAO,CAClB+B,OAAQC,SAASd,GACjBhB,SAAUY,IAHA,SAMKiB,EAAOF,QAAQb,GANpB,OAMViB,EANU,OAQdZ,EAAeY,EAAOC,YARR,2CAAH,qDAWX,OACE,qBAAKC,UAAU,YAAf,SACE,sBAAKA,UAAU,OAAf,UACE,6DACA,sBAAKA,UAAU,iBAAf,UACE,gCACE,yCAAYrB,KACZ,cAAC,EAAD,CACEP,SAAU,SAAC6B,GAAD,OAAOrB,EAAkBqB,EAAGC,OAAOZ,QAC7CnB,MAAOA,OAEX,gCACE,0CAAaU,KACb,cAAC,EAAD,CACET,SAAU,SAAC6B,GAAD,OAAOnB,EAAkBmB,EAAGC,OAAOZ,QAC7CnB,MAAOA,UAIb,uBACEC,SAAU,SAAC6B,GAAD,OAAOjB,EAAkBiB,EAAGC,OAAOZ,QAC7Ca,KAAK,SACLH,UAAU,eAAeI,YAAY,sBACvC,iDAEGnB,KAEH,wBAAQoB,QAAUX,EAAUM,UAAU,aAAtC,0BC3DOM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnB,MAAK,YAAkD,IAA/CoB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5f0c7fbd.chunk.js","sourcesContent":["export default Promise.resolve\r\n    ({\r\n        \"amount\": 1,\r\n        \"base\": \"EUR\",\r\n        \"date\": \"2021-02-19\",\r\n        \"rates\": {\r\n            \"AUD\": 1.5445,\r\n            \"BGN\": 1.9558,\r\n            \"BRL\": 6.5633,\r\n            \"CAD\": 1.5307,\r\n            \"CHF\": 1.0851,\r\n            \"CNY\": 7.8318,\r\n            \"CZK\": 25.849,\r\n            \"DKK\": 7.4368,\r\n            \"GBP\": 0.86508,\r\n            \"HKD\": 9.4121,\r\n            \"HRK\": 7.578,\r\n            \"HUF\": 358.5,\r\n            \"IDR\": 17095,\r\n            \"ILS\": 3.97,\r\n            \"INR\": 88.01,\r\n            \"ISK\": 155.6,\r\n            \"JPY\": 127.81,\r\n            \"KRW\": 1339.59,\r\n            \"MXN\": 24.709,\r\n            \"MYR\": 4.9048,\r\n            \"NOK\": 10.2095,\r\n            \"NZD\": 1.6642,\r\n            \"PHP\": 58.846,\r\n            \"PLN\": 4.483,\r\n            \"RON\": 4.8758,\r\n            \"RUB\": 89.61,\r\n            \"SEK\": 10.033,\r\n            \"SGD\": 1.6059,\r\n            \"THB\": 36.386,\r\n            \"TRY\": 8.447,\r\n            \"USD\": 1.2139,\r\n            \"ZAR\": 17.7391\r\n        }\r\n    })\r\n","import './App.css';\nimport Dinero from 'dinero.js';\nimport RatesPromise from './data/rates.js';\nimport { useEffect, useState } from 'react';\n\n\nDinero.globalExchangeRatesApi = {\n  currency:'EUR',\n  endpoint: RatesPromise\n}\n\nlet CurrencySelector = ({rates, onChange})=>(\n  <select onChange={onChange}>\n    {rates.map((rate, index)=><option key={index}>{rate}</option>)}\n  </select>\n)\n\nfunction App() {\n  let [rates, setRates] = useState([]);\n  let [originCurrency, setOriginCurrency] = useState([]);\n  let [targetCurrency, setTargetCurrency] = useState([]);\n  let [originalAmount, setOriginalAmount] = useState([]);\n  let [finalAmount, setFinalAmount] = useState([]);\n\n  useEffect(()=>{\n    let ratesData;\n    RatesPromise.then((value)=>{\n      ratesData = value;\n      let ratesArray = Object.keys(ratesData.rates);\n      setRates(ratesArray);\n    })\n  },[])\n\n  let convert = async ()=>{\n    let amount = Dinero({\n      amount: parseInt(originalAmount), \n      currency: originCurrency\n    });\n\n  let result = await amount.convert(targetCurrency);\n\n  setFinalAmount(result.toFormat());\n  }\n\n  return (\n    <div className=\"container\">\n      <div className=\"card\">\n        <h1>Conversi√≥n entre Monedas</h1>\n        <div className=\"flex-container\">\n          <div>\n            <p>Origen: {originCurrency}</p>\n            <CurrencySelector \n              onChange={(ev)=> setOriginCurrency(ev.target.value)} \n              rates={rates}/>\n          </div>\n          <div>\n            <p>Destino: {targetCurrency}</p>\n            <CurrencySelector \n              onChange={(ev)=> setTargetCurrency(ev.target.value)}\n              rates={rates}/>\n          </div>\n        </div>\n        \n        <input\n          onChange={(ev)=> setOriginalAmount(ev.target.value)}\n          type=\"number\" \n          className=\"form-control\" placeholder=\"Monto en centavos\" />\n        <p>\n          El resultado es:\n          {finalAmount}\n        </p>\n        <button onClick={ convert } className=\"app-button\">Enviar</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}